@page "/build"
@using Grpc.Core
@inject IBananaService BananaService
@inject IUnitService UnitService
@inject IToastService ToastService
@inject IGrpcUserUnitService GrpcUserUnitService
@attribute [Authorize]

<h3>Build</h3>
<div>
    <select @bind="selectedUnitId" class="form-control">
        @foreach (var unit in UnitService.Units)
        {
            <option value="@unit.Id">@unit.Title // @unit.BananaCost Bananas</option>
        }
    </select>
</div>
<br />
<MudButton @onclick="BuildUnitGrpc" 
           Color="Color.Secondary" 
           Variant="Variant.Filled">
           Build
</MudButton>

@code {
    private int selectedUnitId { get; set; } = 1;
    private int SnackBarRefInterval { get; set; } = 5000;
    private string? SnackBarRefMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UnitService.LoadUnitsAsync();
        //await UnitService.DoGetUnits(2000);
    }

    public async Task BuildUnitRestApi()
    {
        var selectedUnit = UnitService.Units.FirstOrDefault(u => u.Id == selectedUnitId);
        if (selectedUnit != null)
        {
            if (BananaService.Bananas < selectedUnit.BananaCost)
            {
                ToastService.ShowError("Not enough bananas!", ":(");
                return;
            }

            await BananaService.EatBananas(selectedUnit.BananaCost);
            try
            {
                // AddUnit uses Rest Api Call
                await UnitService.AddUnit(selectedUnitId);
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }
        else throw new InvalidOperationException("Cannot build Unit");
    }

    public async Task BuildUnitGrpc()
    {
        var selectedUnit = UnitService.Units.FirstOrDefault(u => u.Id == selectedUnitId);
        if (selectedUnit != null)
        {
            var grpcResponse = await GrpcUserUnitService.DoGrpcBuildUserUnit(selectedUnitId);
            await BananaService.EatBananas(selectedUnit.BananaCost);

            if (grpcResponse.Success)
                ToastService.ShowSuccess($"{grpcResponse.Message}", "Unit built!");
            else
                ToastService.ShowError($"{grpcResponse.Message}", ":(");
        }
        else ToastService.ShowError("Cannot build Unit", ":(");
    }
}
