@page "/build"
@using BlazorGrpcWebApp.Client.Interfaces.Rest
@using Grpc.Core
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAppSettingsService AppSettingsService
@inject IBananaService BananaService
@inject IBananaRestService BananaRestService
@inject IUnitService UnitService
@inject IToastService ToastService
@inject IGrpcUserUnitService GrpcUserUnitService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<MudText Typo="Typo.h4">Build</MudText>
<br/>
<MudGrid>
    <MudItem xs="6">
        <MudPaper>
            <MudText Typo="Typo.h6" Style="margin-bottom: 20px">
                Select hero class and build your unit.
            </MudText>
            <div style="padding-left:10px; padding-right: 10px">
                <MudSelect T="int" 
                           Variant="Variant.Outlined" 
                           AnchorOrigin="Origin.BottomCenter"
                           @bind-Value="@selectedUnitId"
                           ToStringFunc="@(new Func<int, string>(ConvertToBuildItem))">
                    @foreach(var unit in UnitService.Units)
                    {
                        <MudSelectItem Value="unit.Id"/>            
                    }
                </MudSelect>
            </div>
            <br/>
            <br/>
            <MudButton @onclick="BuildUnit" 
                       Color="Color.Secondary" 
                       Variant="Variant.Filled">
                       Build
            </MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>
<div id="BuildThreeJSContainer" style="height: 400px">THREE JS</div>
<button @onclick="ExecuteThreeJS">Run ThreeJS</button>

@code {
    private int authUserId;
    private bool useGrpc;
    private int selectedUnitId { get; set; } = 1;
    private int SnackBarRefInterval { get; set; } = 5000;
    private string? SnackBarRefMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await ((CustomAuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        authUserId = int.Parse(authState.User.FindFirst(ClaimTypes.NameIdentifier)!.Value);

        useGrpc = bool.Parse(AppSettingsService.GetValueFromPagesSec("Build"));

        await UnitService.LoadUnitsAsync();
        //await UnitService.DoGetUnits(2000);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ExecuteThreeJS();
        }
    }

    private async Task ExecuteThreeJS()
    { 
        await JSRuntime.InvokeVoidAsync("JSLib.LoadScene");
    }

    private string ConvertToBuildItem(int unitId)
    {
        var unit = UnitService.Units.FirstOrDefault(u => u.Id == unitId);
        return $"{unit!.Title} // {unit!.BananaCost} Bananas";
    }

    public async Task BuildUnit()
    {
        if (useGrpc) await BuildUnitWithGrpc();
        else await BuildUnitWithRest();
    }

    private async Task BuildUnitWithRest()
    {
        var selectedUnit = UnitService.Units.FirstOrDefault(u => u.Id == selectedUnitId);
        if (selectedUnit != null)
        {
            if (BananaService.Bananas < selectedUnit.BananaCost)
            {
                ToastService.ShowInfo("Not enough bananas!", ":(");
                return;
            }

            try
            {
                await UnitService.AddUnit(selectedUnitId, authUserId);
                await BananaService.EatBananas(selectedUnit.BananaCost);
                ToastService.ShowSuccess($"Your {selectedUnit.Title} has been built!");
            }
            catch (Exception e)
            {
                ToastService.ShowError(e.Message, "Error");
            }
        }
        else ToastService.ShowError("Operation can not be performed", "Error");
    }

    private async Task BuildUnitWithGrpc()
    {
        var selectedUnit = UnitService.Units.FirstOrDefault(u => u.Id == selectedUnitId);
        if (selectedUnit != null)
        {
            var grpcResponse = await GrpcUserUnitService.DoGrpcBuildUserUnit(selectedUnitId);
            await BananaService.EatBananas(selectedUnit.BananaCost);

            if (grpcResponse.Success)
                ToastService.ShowSuccess($"Your {selectedUnit.Title} has been built");
            else
                ToastService.ShowError($"{grpcResponse.Message}", "Error");
        }
        else ToastService.ShowError("Operation can not be performed", "Error");
    }
}
