@page "/register"
@layout RegisterLayout
@using BlazorGrpcWebApp.Client.Interfaces
@using BlazorGrpcWebApp.Client.Interfaces.Grpc
@using BlazorGrpcWebApp.Client.Interfaces.Rest
@using BlazorGrpcWebApp.Client.Services
@using BlazorGrpcWebApp.Shared.Dtos
@using BlazorGrpcWebApp.Shared.Models.UI_Models
@using Grpc.Core
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager
@inject IUnitService UnitService
@inject IAuthRestService AuthRestService
@inject IUserGrpcService GrpcUserService
@inject IToastService ToastService
@inject ICommonDataService CommonData
@inject IAppSettingsService AppSettings
@inject IJSRuntime JSRuntime
@inject ILocalStorageService localStorage

<MudAppBar Color="Color.Transparent" Fixed="false" Dense="true">
    <MudSpacer />
    <MudText Style="font-size:small">
        Already have an account? 
        <a href="/login" style="margin-left:8px; font-weight:600">
            Sign in <MudIcon Icon="@Icons.Filled.ArrowRightAlt"Size="Size.Small"/>
        </a> 
    </MudText>
</MudAppBar>
<MudGrid>
    <MudItem lg="12" sm="5">
        <MudContainer Style="align-items:center; justify-content:center; display:flex; flex-direction:column">
            <MudImage Src="img/Babylon.js-logo.png" 
                       Alt="Logo" Elevation="25" 
                       Class="rounded-lg"
                       Width="150"
                       Height="100"
                       Style="margin-bottom: 35px"/>
            <MudText Typo="Typo.h5" 
                      Color="Color.Tertiary"  
                      Style="margin-bottom:20px; font-weight: 100;">
                      Sign up to Blazor Battles
            </MudText>    
            <MudCard Style="min-width: 375px; max-width: 450px; padding: 16px; border-radius: 6px; border: 1px solid #21262d; background-color:#161b22; position:relative">
                <MudForm @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudText Style="font-size:small; color:#c9d1d3; padding-bottom:2px">
                        Email address
                    </MudText>
                    <MudTextField T="string"
                        @ref="emailRef"
                        InputType="InputType.Email"
                        Variant="Variant.Outlined"
                        Validation="@(new Func<string, Task<string?>> (ValidateEmail))"   
                        Class="register-form-item"
                        Style="font-size:small"
                        DebounceInterval="@debounceInterval"
                        @bind-Value="userRegister.Email"/>
                    <br/>
                    @if (isEmailValid || !string.IsNullOrEmpty(CommonData.EmailAddress))
                    {
                        <Animate Animation="Animations.FadeIn" DelayMs="500" DurationMs="500">
                            <MudText Style="font-size:small; color:#c9d1d3; padding-bottom:2px">
                                Username
                            </MudText>
                            <MudTextField T="string"
                                    @ref="usernameRef"
                                    InputType="InputType.Text"
                                    Variant="Variant.Outlined"
                                    Validation="@(new Func<string, Task<string?>>(ValidateUsername))"
                                    Class="register-form-item"
                                    Style="font-size:small"
                                    DebounceInterval="@(debounceInterval + 500)"
                                    @bind-Value="userRegister.Username"/>
                            <br/>
                        </Animate>
                        @if (isUsernameValid)
                        {
                            <Animate Animation="Animations.FadeIn" DelayMs="500" DurationMs="500">
                                <MudText Style="font-size:small; color:#c9d1d3; padding-bottom:2px;">
                                    <span style="align-items: center; display: flex; justify-content:space-between">
                                        <span>Password</span>
                                        @if (!string.IsNullOrEmpty(userRegister.Password))
                                        { 
                                            <Animate Animation="Animations.FadeIn" DurationMs="500">
                                                <MudButton OnClick="TogglePasswordVisibility" Style="padding: 0; min-width: 0; margin-right: 15px">
                                                    <MudIcon Icon="@passwordIcon" Size="Size.Small" Color="Color.Dark"/>
                                                </MudButton>
                                            </Animate>
                                        }
                                        else { showPassword = false; passwordIcon = @Icons.Filled.VisibilityOff; }
                                    </span>
                                </MudText>
                                <MudTextField T="string"
                                    @ref="passwordRef"
                                    Variant="Variant.Outlined"
                                    InputType="@passwordInput"
                                    Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))"
                                    Class="register-form-item"
                                    Style="font-size:small"
                                    DebounceInterval="@(debounceInterval + 500)"
                                    @bind-Value="userRegister.Password"/>
                                <br/>
                            </Animate>
                            @if (isPasswordValid)
                            { 
                                <Animate Animation="Animations.FadeIn" DelayMs="500" DurationMs="500">
                                    <MudText Style="font-size:small; color:#c9d1d3; padding-bottom:2px">
                                        <span style="align-items: center; display: flex; justify-content:space-between">
                                            <span>Confirm Password</span>
                                            @if (!string.IsNullOrEmpty(userRegister.ConfirmPassword))
                                            { 
                                                <Animate Animation="Animations.FadeIn" DurationMs="500">
                                                                    <MudButton OnClick="ToggleConfirmPasswordVisibility" Style="padding: 0; min-width: 0; margin-right: 15px">
                                                        <MudIcon Icon="@confirmPasswordIcon" Size="Size.Small" Color="Color.Dark"/>
                                                    </MudButton>
                                                </Animate>
                                            }
                                            else { showConfirmPassword = false; confirmPasswordIcon = @Icons.Filled.VisibilityOff; }
                                        </span>
                                    </MudText>
                                    <MudTextField T="string"
                                        @ref="confirmPasswordRef"
                                        Variant="Variant.Outlined"
                                        InputType="@confirmPasswordInput"
                                        Validation="@(new Func<string, IEnumerable<string>>(ValidateConfirmPassword))"
                                        Class="register-form-item"
                                        Style="font-size:small"
                                        DebounceInterval="@(debounceInterval + 500)"
                                        @bind-Value="userRegister.ConfirmPassword"/>
                                    <br/>
                                </Animate>
                                @if (isPasswordConfirmedValid)
                                {
                                    <Animate Animation="Animations.FadeIn" DelayMs="500" DurationMs="500">
                                        @if (isAdmin)
                                        {
                                            <MudText Style="font-size:small; color:#c9d1d3; padding-bottom:2px">
                                                Bio
                                            </MudText>
                                            <MudTextField T="string"
                                            InputType="InputType.Text"
                                            Variant="Variant.Outlined"
                                            Class="register-form-item"
                                            DebounceInterval="@debounceInterval"
                                            @bind-Value="userRegister.Bio"/>
                                            <br/>
                                        }
                                        <MudText Style="font-size:small; color:#c9d1d3; padding-bottom:2px">
                                            Start Unit
                                        </MudText>
                                        <MudSelect AnchorOrigin="Origin.BottomCenter"
                                            Variant="Variant.Outlined"
                                            Class="register-form-item"
                                            @bind-Value="userRegister.StartUnitId"
                                            ToStringFunc="@(new Func<int, string>(ConvertToTitle))">
                                        @foreach (var unit in grpcUnitsResponses)
                                        {
                                            <MudSelectItem Value="@unit.GrpcUnit.Id">
                                                <span style="font-family: Roboto-Regular; font-size:small">@unit.GrpcUnit.Title</span>
                                            </MudSelectItem>
                                        }
                                        </MudSelect>
                                        <br/>
                                        @if (isAdmin)
                                        { 
                                            <MudTextField T="int"
                                                InputType="InputType.Number"
                                                Variant="Variant.Outlined"
                                                Validation="@(new Func<int, IEnumerable<string>>(ValidateBananasNumber))"
                                                Placeholder="Bananas"
                                                Class="register-form-item"
                                                @bind-Value="userRegister.Bananas"/>
                                            <br/>
                                        }
                                        <MudText Style="font-size:small; color:#c9d1d3; padding-bottom:2px">
                                            Select your Date of Birth
                                        </MudText>
                                        <MudDatePicker Variant="Variant.Outlined"
                                            Editable="true"
                                            Rounded="true"
                                            PickerVariant="PickerVariant.Inline"
                                            Elevation="1"
                                            Color="Color.Secondary"
                                            Class="register-form-item"
                                            Style="font-size: small"
                                            @bind-Date="date"/>
                                        <MudCheckBox T="bool" 
                                            @bind-Checked="userRegister.IsConfirmed" 
                                            Style="font-family: Roboto-Regular; font-size:smaller">
                                            <MudText Style="font-family: Roboto-Regular; font-size:smaller">
                                                Confirmed
                                            </MudText>
                                        </MudCheckBox>
                                        <MudCardActions Style="padding: 0">
                                            <MudButton OnClick="async () => await RegisterUser(userRegister.StartUnitId)" 
                                                Variant="Variant.Filled"
                                                Class="ml-auto"
                                                Style="text-transform: none; width: 100%; border-radius: 6px;"
                                                Color="Color.Secondary" 
                                                Disabled="@(!AllowSignUp)">
                                                Sign up
                                            </MudButton>
                                        </MudCardActions>
                                    </Animate>
                                }
                            }
                        }
                    }
                </MudForm>
            </MudCard>
            @if (isUsernameValid && !isPasswordValid)
            { 
                <Animate Animation="Animations.FadeIn" DelayMs="1100" DurationMs="750">
                    <MudContainer Style="width: 400px; padding: 16px;">
                        <MudText Style="justify-content:center; font-size: small; color:#989898;">
                            Make sure it's at most 15 characters AND at least 8 characters including a number and a uppaercase letter.
                        </MudText>
                    </MudContainer>
                </Animate>
            }
        </MudContainer>
    </MudItem>
    <MudItem lg="12">
        <MudContainer Style="max-width: 900px; padding: 16px; margin-top: 5px; justify-content:center">
            <MudText Style="justify-content:center; font-size: smaller; color:#a6a6a6; word-wrap:break-word">
                By creating an account, you agree to the <a href="#">Terms of Service</a>. For more information about Blazor Battles privacy practices, 
                see the <a href="#">Blazor Battle Privacy Statement</a>.               
            </MudText>               
        </MudContainer>
    </MudItem>
</MudGrid>

<style>
    .register-form-item {
        font-family: Roboto-Regular;
        font-size: small;
        color: #c9d1d3;
    }
    .mud-input {
        background-color: #0d1117;
        height: 35px;
    }
    .mud-input-outlined-border {
        color: #21262d;
    }
    .check-circle-turnOff {
        opacity: 0;
    }
    .check-circle-turnOn {
        animation: fadeIn  0.75s; 
        opacity: 1;
    }
    a:hover {
        color: #165ddb;
        text-decoration: underline;
    }
    .mud-elevation-4 {
        box-shadow: none;
    }
</style>

@code {
    private bool useGrpc;
    private bool isAdmin = false;
    private bool success = false;
    private string[] errors = { };
    private bool isEmailValid = false;
    private bool isUsernameValid = false;
    private bool isPasswordValid = false;
    private bool isPasswordConfirmedValid = false;
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private string passwordIcon = Icons.Filled.VisibilityOff;
    private string confirmPasswordIcon = Icons.Filled.VisibilityOff;
    private InputType passwordInput = InputType.Password;
    private InputType confirmPasswordInput = InputType.Password;

    private MudTextField
    <string>? emailRef;
    private MudTextField<string>? usernameRef;
    private MudTextField<string>? passwordRef;
    private MudTextField<string>? confirmPasswordRef;

    private const int debounceInterval = 1500;
    private DateTime? date = DateTime.Today;
    private UserRegister userRegister = new UserRegister() { Bananas = 100, IsConfirmed = false, Bio = string.Empty };
    private IList<GrpcUnitResponse> grpcUnitsResponses = new List<GrpcUnitResponse>();    
    private IJSObjectReference? module;

    public int grpcRegisterDeadline { get; set; } = 5000;
    public bool AllowSignUp { get { return success && userRegister.IsConfirmed; } }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(CommonData.EmailAddress))
            userRegister.Email = CommonData.EmailAddress;

        useGrpc = bool.Parse(AppSettings.GetValueFromPagesSec("Register"));

        try
        {
            grpcUnitsResponses = await UnitService.DoGetGrpcUnits(UnitService.deadline);
        }
        catch (RpcException e)
        {
            ToastService.ShowError(e.StatusCode.ToString());
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!string.IsNullOrEmpty(CommonData.EmailAddress))
        {
            TurnOnAdorment(emailRef, "Validate-Email");
        }

        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/Pages/Register.razor.js");
            if (module != null)
            { 
                await module.InvokeAsync<string>("TurnOffAutoComplete");
            }
        }
    }

    #region Validation Methods
    private async Task<string?> ValidateEmail(string email)
    {
        var emailValidator = new EmailAddressAttribute();
        if (string.IsNullOrEmpty(email))
        {
            TurnOffAdorment(emailRef);
            return "Email address is required";
        }
        if (!emailValidator.IsValid(email))
        {
            TurnOffAdorment(emailRef);
            return "Email address in invalid";
        }
        if (emailValidator.IsValid(email) && !string.IsNullOrEmpty(email))
        { 
            if (await AuthRestService.UserEmailExists(email))
            {
                TurnOffAdorment(emailRef);
                return "Such email address is already occupied";
            }
            else
            {
                isEmailValid = true;
                TurnOnAdorment(emailRef, "Validate-Email");
                return null;
            }
        }
        return null;
    }

    private async Task<string?> ValidateUsername(string username)
    {
        if (string.IsNullOrEmpty(username))
        {
            TurnOffAdorment(usernameRef);
            return "Username is required";
        }
        if (username.Length > 16)
        {
            TurnOffAdorment(usernameRef);
            return "Your username is too long (16 characters max)";
        }
        if (!string.IsNullOrEmpty(username) && !(username.Length > 16))
        {
            if (await AuthRestService.UserNameExists(username))
            {
                return "Such username is already occupied";
            }
            else
            { 
                TurnOnAdorment(usernameRef, "Validate-Username");
                isUsernameValid = true;
                return null;
            }
        }
        return null;
    }

    private IEnumerable<string> ValidatePassword(string password)
    {
        if (string.IsNullOrEmpty(password))
        {
            TurnOffAdorment(passwordRef);
            yield return "Password is required";
        }
        if (password.Length < 8)
        {
            TurnOffAdorment(passwordRef);
            yield return "Password must be at least of length 8";
        }
        if (password.Length > 15)
        {
            TurnOffAdorment(passwordRef);
            yield return "Password must be at most of length 15";
        }
        if (!Regex.IsMatch(password, @"[A-Z]"))
        {
            TurnOffAdorment(passwordRef);
            yield return "Password must contain at least one capital letter";
        }
        if (!Regex.IsMatch(password, @"[a-z]"))
        {
            TurnOffAdorment(passwordRef);
            yield return "Password must contain at least one lowercase letter";
        }
        if (!Regex.IsMatch(password, @"[0-9]"))
        {
            TurnOffAdorment(passwordRef);
            yield return "Password must contain at least one digit";
        }
        if (!string.IsNullOrEmpty(password) && !(password.Length < 8) && !(password.Length > 100) &&
            Regex.IsMatch(password, @"[A-Z]") && Regex.IsMatch(password, @"[a-z]") && Regex.IsMatch(password, @"[0-9]"))
        {
            TurnOnAdorment(passwordRef, "Validate-Password");
            isPasswordValid = true;   
        }
    }

    private IEnumerable<string> ValidateConfirmPassword(string password)
    {
        if (password != userRegister.Password)
        {
            TurnOffAdorment(confirmPasswordRef);
            yield return "Passwords don't match";
        }
        if (password == userRegister.Password)
        {
            TurnOnAdorment(confirmPasswordRef, "Vaidate-ConfirmPassword");
            isPasswordConfirmedValid = true;
        }
    }

    private IEnumerable<string> ValidateBananasNumber(int number)
    {
        if (number < 1 || number > 1000)
            yield return "Please choose a number between 1 and 1000.";
    }
    #endregion

    #region Private Methods
    private void TogglePasswordVisibility()
    {
        if (!showPassword)
        {
            passwordInput = InputType.Text;
            passwordIcon = Icons.Filled.Visibility;
            showPassword = !showPassword;
        }
        else
        {
            passwordInput = InputType.Password;
            passwordIcon = Icons.Filled.VisibilityOff;
            showPassword = !showPassword;
        }
    }

    private void ToggleConfirmPasswordVisibility()
    { 
        if (!showConfirmPassword)
        {
            confirmPasswordInput = InputType.Text;
            confirmPasswordIcon = Icons.Filled.Visibility;
            showConfirmPassword = !showConfirmPassword;
        }
        else
        {
            confirmPasswordInput = InputType.Password;
            confirmPasswordIcon = Icons.Filled.VisibilityOff;
            showConfirmPassword = !showConfirmPassword;
        }
    }

    private string ConvertToTitle(int id)
    {
        return grpcUnitsResponses.FirstOrDefault(g => g.GrpcUnit.Id == id)!.GrpcUnit.Title;
    }

    private void TurnOnAdorment(MudTextField<string>? reference, string adornmentAriaLabel)
    {
        reference.Adornment = Adornment.End;
        reference.AdornmentIcon = Icons.Filled.CheckCircleOutline;
        reference.AdornmentColor = Color.Secondary;
        reference.AdornmentAriaLabel = adornmentAriaLabel;
    }

    private void TurnOffAdorment(MudTextField<string>? reference)
    {
        reference.AdornmentIcon = null;
    }

    private async Task RegisterUser(int startUnitId)
    {
        if (useGrpc == true)
        {
            await HandleRegistrationGrpc(startUnitId);
        }
        else
        {
            await HandleRegistrationRestApi(startUnitId);
        }

        var expireDate = DateTime.Now.AddMinutes(10);
        await localStorage.SetItemAsync<string>("email", userRegister.Email);
        await localStorage.SetItemAsync<DateTime>("expireDate", expireDate);
    }

    private async Task HandleRegistrationRestApi(int startUnitId)
    {
        var request = new UserRegisterRequestDto()
            {
                UserRegister = userRegister,
                StartUnitId = startUnitId
            };

        var result = await AuthRestService.Register(request);
        if (result!.Success)
        {
            NavigationManager.NavigateTo("/verification");
            ToastService.ShowSuccess(result.Message);
        }
        else ToastService.ShowError(result.Message);
    }

    private async Task HandleRegistrationGrpc(int startUnitId)
    {
        userRegister.DateOfBirth = (DateTime)date!;
        var result = await GrpcUserService.RegisterWithGrpc(userRegister, startUnitId, grpcRegisterDeadline);
        if (result.Success)
        {
            ToastService.ShowSuccess(result.Message);
            NavigationManager.NavigateTo("/verification");
        }
        else ToastService.ShowError(result.Message);
    }
    #endregion
}
