@page "/register"
@using Grpc.Core
@inject IUnitService UnitService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>Register</h3>

<Div style="display: flex;">
<EditForm Model=@userRegister OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="email" class="required">Email</label>
        <InputText id="email" @bind-Value="userRegister.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => userRegister.Email)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="userRegister.Username" class="form-control"></InputText>
        <ValidationMessage For="@(() => userRegister.Username)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="password" class="required">Password</label>
        <InputText id="password" @bind-Value="userRegister.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => userRegister.Password)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="userRegister.ConfirmPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => userRegister.ConfirmPassword)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="bio">Bio</label>
        <InputTextArea id="bio" @bind-Value="userRegister.Bio" class="form-control"></InputTextArea>
    </div>
    <div class="form-group">
        <label for="startUnit">Start Unit</label>
        <InputSelect id="startUnit" @bind-Value="userRegister.StartUnitId" class="form-control">
            @foreach(var unit in grpcUnitsResponses)
            {
                <option value="@unit.GrpcUnit.Id">@unit.GrpcUnit.Title</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="bananas">Bananas</label>
        <InputNumber id="bananas" @bind-Value="userRegister.Bananas" class="form-control"></InputNumber>
        <ValidationMessage For="@(() => userRegister.Bananas)"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="dateOfBirth">Date of Birth</label>
        <InputDate id="dateOfBirth" @bind-Value="userRegister.DateOfBirth" class="form-control"></InputDate>
        <ValidationMessage For="@(() => userRegister.DateOfBirth)"></ValidationMessage>
    </div>
    <div class="form-check">
        <InputCheckbox id="confirmed" @bind-Value="userRegister.IsConfirmed" class="form-check-input"></InputCheckbox>
        <label for="confirmed">Confirmed</label>
        <ValidationMessage For="@(() => userRegister.IsConfirmed)"></ValidationMessage>
    </div>
    <br />
    <input type="submit" class="btn btn-primary" value="Register"/>
</EditForm>
</Div>

@code {
    private UserRegister userRegister = new UserRegister();
    private IList<GrpcUnitResponse> grpcUnitsResponses = new List<GrpcUnitResponse>();

    protected override async Task OnInitializedAsync()
    {
        // await UnitService.LoadUnitsAsync();
        grpcUnitsResponses = await UnitService.DoGetGrpcUnits(UnitService.deadline);
    }

    private Task HandleRegistration()
    {
        JSRuntime.InvokeVoidAsync("console.log", userRegister);
        NavigationManager.NavigateTo("login");
        return Task.CompletedTask;
    }
}
