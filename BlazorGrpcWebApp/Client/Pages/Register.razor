@page "/register"
@using BlazorGrpcWebApp.Client.Interfaces
@using BlazorGrpcWebApp.Client.Interfaces.Providers.Rest
@using Grpc.Core
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject IUnitService UnitService
@inject IAuthRestProvider AuthProvider
@inject IGrpcUserService GrpcUserService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<h3>Register</h3>
<MudGrid>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4">
            <MudForm @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" 
                              Label="Email"
                              InputType="InputType.Email"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="Email is required!"
                              Validation="@(new Func<string, IEnumerable<string>>(ValidateEmail))"
                              @bind-Value="userRegister.Email"/>
                <br/>              
                <MudTextField T="string"
                              Label="Username"
                              InputType="InputType.Text"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="Username is required!"
                              Validation="@(new Func<string, IEnumerable<string>>(ValidateUsername))"
                              @bind-Value="userRegister.Username"/>
                <br/>
                <MudTextField T="string"
                              Label="Password"
                              Variant="Variant.Outlined"
                              InputType="InputType.Password"
                              Required="true" 
                              RequiredError="Password is required!"
                              Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))"
                              @bind-Value="userRegister.Password"/>
                <br/>
                <MudTextField T="string"
                              Label="Confirm Password"
                              Variant="Variant.Outlined"
                              InputType="InputType.Password"
                              Required="true" 
                              RequiredError="Password confirmation is required!"
                              Validation="@(new Func<string, IEnumerable<string>>(ValidateConfirmPassword))"
                              @bind-Value="userRegister.ConfirmPassword"/>
                <br/>
                <MudTextField T="string"
                              Label="Bio"
                              InputType="InputType.Text"
                              Variant="Variant.Outlined"
                              @bind-Value="userRegister.Bio"/>
                <br/>
                <MudSelect Label="Start Unit"
                           AnchorOrigin="Origin.BottomCenter"
                           Variant="Variant.Outlined"
                           @bind-Value="userRegister.StartUnitId"
                           ToStringFunc="@(new Func<int, string>(ConvertToTitle))">
                    @foreach(var unit in grpcUnitsResponses)
                    {
                        <MudSelectItem Value="@unit.GrpcUnit.Id">
                            <span style="font-family: Roboto; font-size:initial">@unit.GrpcUnit.Title</span>
                        </MudSelectItem>
                    }
                </MudSelect>
                <br/>
                <MudTextField T="int"
                              Label="Bananas"
                              InputType="InputType.Number"
                              Variant="Variant.Outlined"
                              Validation="@(new Func<int, IEnumerable<string>>(ValidateBananasNumber))"
                              @bind-Value="userRegister.Bananas"/>
                <br/>
                <MudDatePicker Label="Select your Date of Birth"
                               Variant="Variant.Outlined"
                               Style="font-family: Roboto;"
                               Editable="true"
                               Rounded="true"
                               PickerVariant="PickerVariant.Inline"
                               Elevation="1"
                               Color="Color.Error"
                               @bind-Date="date"
                                />
                <br/>
                <div class="d-flex">
                <MudSwitch @bind-Checked="userRegister.IsConfirmed" 
                           Class="mud-width-full" 
                           Color="Color.Error">
                    <MudText Style="font-family: Roboto; font-size:smaller">Confirmed</MudText>
                </MudSwitch>
                </div>
                <MudCardActions>
                    <MudButton OnClick="async () => await HandleRegistrationGrpc(userRegister.StartUnitId)" 
                               Variant="Variant.Filled" 
                               Color="Color.Error" 
                               Disabled="@(!success)"
                               Class="ml-auto">
                               Register
                    </MudButton>
                </MudCardActions>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool success;
    private string[] errors = { };
    private DateTime? date = DateTime.Today;

    private UserRegister userRegister = new UserRegister();
    private IList<GrpcUnitResponse> grpcUnitsResponses = new List<GrpcUnitResponse>();
    private int grpcRegisterDeadline { get; set; } = 5000;

    protected override async Task OnInitializedAsync()
    {
        // await UnitService.LoadUnitsAsync();
        try
        {
            grpcUnitsResponses = await UnitService.DoGetGrpcUnits(UnitService.deadline);
        }
        catch (RpcException e)
        {
            ToastService.ShowError(e.StatusCode.ToString());
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message);
        }

    }

    // uses REST Api
    private async Task HandleRegistrationRestApi()
    {
        var result = await AuthProvider.Register(userRegister);
        if (result!.Success)
        {
            ToastService.ShowSuccess(result.Message);
            NavigationManager.NavigateTo("/");
        }
        else ToastService.ShowError(result.Message);            
    }

    // uses Grpc Calls
    private async Task HandleRegistrationGrpc(int startUnitId)
    {
        userRegister.DateOfBirth = (DateTime) date!;
        var result = await GrpcUserService.Register(userRegister, startUnitId, grpcRegisterDeadline);
        if (result.Success)
        {
            ToastService.ShowSuccess(result.Message);
            NavigationManager.NavigateTo("/");
        }
        else ToastService.ShowError(result.Message);
    }

    //Validation Methods
    private IEnumerable<string> ValidateEmail(string email)
    {
        var emailValidator = new EmailAddressAttribute();
        if (string.IsNullOrEmpty(email))
            yield return "Email address is required!";
        if (!emailValidator.IsValid(email))
            yield return "Email address in invalid!";
    }

    private IEnumerable<string> ValidateUsername(string username)
    {
        if (string.IsNullOrEmpty(username))
            yield return "Username is required!";
        if (username.Length > 16)
            yield return "Your username is too long! (16 characters max)";
    }

    private IEnumerable<string> ValidatePassword(string password)
    {
        if (string.IsNullOrEmpty(password))
            yield return "Password is required!";
        if (password.Length < 8)
            yield return "Password must be at least of length 8";
        if (password.Length > 100)
            yield return "Password must be at most of length 100";
        if (!Regex.IsMatch(password, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(password, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(password, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private IEnumerable<string> ValidateConfirmPassword(string password)
    {
        if(password != userRegister.Password)
            yield return "Passwords don't match";
    }

    private IEnumerable<string> ValidateBananasNumber(int number)
    {
        if (number < 1 || number > 1000)
            yield return "Please choose a number between 1 and 1000.";
    }

    private string ConvertToTitle(int id)
    {
        return grpcUnitsResponses.FirstOrDefault(g => g.GrpcUnit.Id == id)!.GrpcUnit.Title;
    }
}
