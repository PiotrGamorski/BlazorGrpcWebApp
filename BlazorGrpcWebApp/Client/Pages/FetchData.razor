@page "/fetchdata" 
@using BlazorGrpcWebApp.Shared 
@using Grpc.Net.Client;
@inject WeatherForecasts.WeatherForecastsClient WeatherForecastsClient
@inject UnitServiceGrpc.UnitServiceGrpcClient UnitServiceGrpcClient

<h1>Weather forecast</h1> 
<p>This component demonstrates fetching data from the server.</p> 

@if (forecastsProto == null) 
{ 
	<p><em>Loading...</em></p> 
} 
else 
{ 
	<table class="table"> 
	<thead> 
	<tr> 
	<th>Date</th> 
	<th>Temp. (C)</th> 
	<th>Summary</th> 
	</tr> 
	</thead> 
	<tbody> 
	@foreach (var forecast in forecastsProto) 
	{ 
		<tr>  
		<td>@forecast.DateTimeStampProto.ToDateTime()</td>		
		<td>@forecast.TemperatureProto</td> 
		<td>@forecast.SummaryProto</td> 
		</tr> 
	} 
	</tbody> 
	</table>

	@foreach (var unit in units)
	{
		<div>@unit.Title</div>
	}
} 

@code 
{
	private IList<WeatherForecastRequest> forecastsProto = new List<WeatherForecastRequest>();
	private IList<UnitResponse> units = new List<UnitResponse>();

	protected override async Task OnInitializedAsync() 
	{ 
		forecastsProto = (await WeatherForecastsClient.GetWeatherAsync(new WeatherForecastRequest())).ForecastsProto;
		await DoGetUnits();
	} 

	private async Task DoGetUnits()
	{
		var unitResponse = UnitServiceGrpcClient.GetUnits(new UnitRequest() { });
		while (await unitResponse.ResponseStream.MoveNext(new CancellationToken()))
		{
			units.Add(unitResponse.ResponseStream.Current);
		}
	}
}