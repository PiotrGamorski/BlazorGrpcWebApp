@page "/army"
@using BlazorGrpcWebApp.Client.Interfaces.Grpc
@using BlazorGrpcWebApp.Client.Interfaces.Rest
@using BlazorGrpcWebApp.Shared.Models.UI_Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAppSettingsService AppSettingsService
@inject IArmyGrpcService ArmyGrpcService
@inject IArmyRestService ArmyRestService
@inject IUnitService UnitService
@inject IGrpcUserUnitService GrpcUserUnitService
@inject IBananaService BananaService
@inject IBananaRestService BananaRestService
@inject IToastService ToastService
@inject IDialogService DialogService
@attribute [Authorize]

<MudGrid>
   <MudItem xs="8">
       <MudCard>
           <MudCardHeader Style="border-bottom-color: white">
                <MudText Typo="Typo.h5">
                    <MudIcon Icon="@Icons.Filled.PeopleAlt" Size="Size.Medium" Style="margin-right: 5px"/>
                    My Army
                </MudText>
                <MudSpacer/>
                <MudTextField @bind-Value="ArmySearchString" 
                              Placeholder="Search" 
                              Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Search" 
                              IconSize="Size.Medium" 
                              Class="mt-0"/>
           </MudCardHeader>
           <MudCardContent>
                @if (ArmyUnits != null && ArmyUnits.Count > 0)
                {
                    <MudTable Items="@ArmyUnits"
                              Filter="new Func<ArmyUnit, bool>(Filter)"
                              RowsPerPage="15" 
                              Hover="true"
                              Dense="true" 
                              SortLabel="Sort By">
                        <HeaderContent>
                            <MudTh></MudTh>
                            <MudTh></MudTh>
                            <MudTh>
                                <MudTableSortLabel InitialDirection="SortDirection.None" 
                                                   SortBy="new Func<ArmyUnit, object>(x => x.Title!)">
                                Title                 
                                </MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel InitialDirection="SortDirection.Descending" 
                                                   SortBy="new Func<ArmyUnit, object>(x => x.HitPoints!)">
                                Hit Points                
                                </MudTableSortLabel>
                            </MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd></MudTd>
                            <MudTd DataLabel="Img"><img src=@($"{context.Img}")/></MudTd>
                            <MudTd DataLabel="Title">@context.Title</MudTd>
                            <MudTd DataLabel="Hit Points">@context.HitPoints</MudTd>
                            <MudTd DataLabel="Actions">
                                <div style="display: flex; justify-content:center">
                                    <MudButton Variant="Variant.Filled"
                                           Color="Color.Success"
                                           Disabled="@(context.HitPoints == 100 ? true : false)"
                                           Style="margin-right: 5px"
                                           OnClick="async () => await Heal(context.UserUnitId)">
                                           <MudTooltip Placement="Placement.Left" Text="Heals the unit to maximum hit points.">
                                               <MudIcon Style="margin-right: 3px;" Icon="@Icons.Filled.HealthAndSafety"/>
                                           </MudTooltip>
                                           Heal
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                        Color="Color.Error"
                                        OnClick="async () => await ShowDeleteUserUnitDialog(context.UserUnitId)">         
                                        <MudText Style="text-transform: none;">Delete</MudText>
                                        <MudTooltip Placement="Placement.Right" Text="Permanetly deletes unit.">
                                            <MudIcon Style="margin-left: 3px;" Icon="@Icons.Filled.Delete"/>
                                        </MudTooltip> 
                                    </MudButton>
                                </div>
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager />
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Info"
                                       OnClick="async () => await ShowReviveArmyDialog()">
                                 <MudTooltip Placement="Placement.Left" Text="Heals all units with random hit points.">
                                    <MudIcon Icon="@Icons.Filled.LocalHospital"
                                             Style="margin-right: 3px"/>
                                    </MudTooltip>
                                    Revive Army          
                            </MudButton>
                        </PagerContent>
                    </MudTable>
               }
               else
               {
                <MudProgressLinear Color="Color.Error" Indeterminate="true" Class="my-7" />       
               }   
        </MudCardContent>
        </MudCard>
   </MudItem> 
</MudGrid>

@code
{
    private string ArmySearchString { get; set; } = string.Empty;
    
    private bool Filter(ArmyUnit armyUnit) => FilterImplementation(armyUnit, ArmySearchString);
    private bool FilterImplementation(ArmyUnit myUnit, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        else if (myUnit.Title!.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        else if (myUnit.HitPoints.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        else return false;
    }
}