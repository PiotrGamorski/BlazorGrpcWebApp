@page "/army"
@using BlazorGrpcWebApp.Client.Interfaces.Grpc
@using BlazorGrpcWebApp.Client.Interfaces.Rest
@using BlazorGrpcWebApp.Shared.Dictionaries
@using BlazorGrpcWebApp.Shared.Enums
@using BlazorGrpcWebApp.Shared.Models.UI_Models
@using BlazorGrpcWebApp.Shared.Services.Static
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAppSettingsService AppSettingsService
@inject IArmyGrpcService ArmyGrpcService
@inject IArmyRestService ArmyRestService
@inject IUnitService UnitService
@inject IGrpcUserUnitService GrpcUserUnitService
@inject IBananaService BananaService
@inject IBananaRestService BananaRestService
@inject IToastService ToastService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<br/>
<MudGrid id="table-grid">
    <MudItem xs="8" Style="padding-left:40px;">
        @if (ArmyUnits != null && ArmyUnits.Count > 0)
        {
            <Animate Animation="Animations.FadeIn" DurationMs="500">
            <MudTable Items="@ArmyUnits"
                      Filter="new Func<ArmyUnit, bool>(Filter)"
                      RowsPerPage="10" 
                      Hover="true"
                      Dense="true"
                      T="ArmyUnit"
                      Style="background-color:#0d1117; border-radius:6px; border: 0.25px solid #30363d"
                      SortLabel="Sort By"
                      id="army-table">
                <ToolBarContent>
                    <MudText Typo="Typo.h5">
                        <MudIcon Icon="@Icons.Filled.PeopleAlt" Size="Size.Medium" Style="margin-right: 5px"/> My Army
                    </MudText>
                    <MudSpacer/>
                    <MudTextField @bind-Value="ArmySearchString" 
                                  Style="font-size:small; width: 101.5% "
                                  FullWidth=false
                                  Placeholder="Search" 
                                  Adornment="Adornment.Start" 
                                  AdornmentIcon="@Icons.Material.Filled.Search" 
                                  IconSize="Size.Medium" 
                                  Class="mt-0"/>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh/>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.None" SortBy="new Func<ArmyUnit, object>(x => x.Title!)">Title</MudTableSortLabel>
                     </MudTh>
                     <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<ArmyUnit, object>(x => x.HitPoints!)">Hit Points</MudTableSortLabel>
                     </MudTh>
                     <MudTh><span style="display:flex; justify-content:center">Actions</span></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Img"><img src=@($"{context.Img}") style="width: 25px; height:25px"/></MudTd>
                    <MudTd DataLabel="Title">@context.Title</MudTd>
                    <MudTd DataLabel="Hit Points">@context.HitPoints</MudTd>
                    <MudTd DataLabel="Actions">
                        <div style="display: flex; justify-content:center">
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Success"
                                       Disabled="@(context.HitPoints == 100 ? true : false)"
                                       Style="margin-right: 5px"
                                       Size="Size.Small"
                                       OnClick="async () => await Heal(context.UserUnitId)">
                                <MudTooltip Placement="Placement.Left" Text="Heals the unit to maximum hit points.">
                                    <MudIcon Icon="@Icons.Filled.HealthAndSafety" Style="width: 20px; height:20px"/>
                                </MudTooltip>
                            </MudButton>
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Error"
                                       OnClick="async () => await ShowDeleteUserUnitDialog(context.UserUnitId)">         
                                    <MudTooltip Placement="Placement.Right" Text="Permanetly deletes unit.">
                                        <MudIcon Icon="@Icons.Filled.Delete" Style="width: 20px; height:20px"/>
                                    </MudTooltip> 
                            </MudButton>
                        </div>
                    </MudTd>
                 </RowTemplate>
                 <PagerContent>
                    <div style="width: 100%; display:flex; align-items: center; justify-content:space-between">
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Secondary"
                                   Style="margin-left: 10px; margin-bottom: 10px;"
                                   OnClick="async () => await ShowReviveArmyDialog()">
                            <MudTooltip Placement="Placement.Left" Text="Heals all units with random hit points.">
                                <MudIcon Icon="@Icons.Filled.LocalHospital" Style="margin-right: 3px"/>
                            </MudTooltip>        
                            <MudText Style="text-transform: none; font-size:small">Revive Army</MudText>         
                        </MudButton>
                        <MudTablePager Style="color: #88949E; font-size: small" PageSizeOptions="new int[] {10, 15, 20}" />
                    </div>
                 </PagerContent>
             </MudTable>
             </Animate>
        }
        else
        {
            <MudElement HtmlTag="div" Style="position:absolute; top:50%; right: 50%; transform:translate(50%, -50%);">
                <MudProgressCircular Color="Color.Dark" Indeterminate="true" Style="margin-top: 50vh"/>
            </MudElement>      
        }
   </MudItem>
    <MudItem xs="4">
        <MudElement HtmlTag="div" Style="display:flex; flex-direction:column; align-items: flex-start; justify-content:center;">
            @if (!isPopoverClosed)
            {
                <Animate Animation="Animations.FadeIn" DurationMs="500">
                    <MudContainer Style="display:flex; justify-content:center;">
                        <MudCard  Style="border-radius: 6px; border: 1px solid #21262d; height:235px; width: 350px; position: relative">
                            <MudImage Src="https://github.githubassets.com/images/modules/dashboard/universe22/bg.jpg" 
                              Width="350" 
                              Height="235" 
                              Elevation="-1" 
                              Class="rounded"/>
                            <div style="position: absolute; left: 0; top:0">
                                <div style="display:flex; flex-direction:column; justify-content:center; padding: 16px; position: relative">
                                    <div style="display:flex; align-items: center; justify-content:space-between;">
                                        <div style="display: flex; align-items: center">
                                            <MudIcon Icon="@Icons.Custom.Brands.GitHub" Size="Size.Medium" Style="margin-right: 10px;"/>
                                            <MudText Style="font-size: 25px">Universe 2002</MudText>
                                        </div>
                                        <div style="margin-left: 55px">
                                            <MudIconButton Icon="@Icons.Filled.Close" 
                                                   Size="Size.Small"
                                                   OnClick="async () => { isPopoverClosed = true; }"/>
                                        </div>
                                    </div>
                                    <br/>
                                    <MudText Style="font-size:small; font-weight:bold">Let's build from here</MudText>
                                    <MudText Style="font-size:small; text-align: justify; text-justify: inter-word;">
                                        Join the global developer event for cloud, security, community, and AI.
                                        Register today and get a 20% off early bird discount.
                                    </MudText>
                                    <br/>
                                    <MudButton Variant="Variant.Outlined">
                                        <span style="color: white!important;text-transform:none; font-weight:bold;">Register now</span>
                                    </MudButton>
                                </div>
                            </div>
                        </MudCard>
                    </MudContainer>
                </Animate>
                <br/>
            }
            @if (LastActivities != null && LastActivities.Count() > 0)
            { 
                <MudText Style="font-size:small; margin-left: -140px; font-weight: bold">Latest activities</MudText>
                <Animate Animation="Animations.FadeIn" DurationMs="500">
                <MudTimeline TimelinePosition="TimelinePosition.Left" Style="max-width: 360px">
                    @foreach (var activity in LastActivities!)
                    {
                        <MudTimelineItem Size="Size.Small" Color="Color.Dark">
                            <ItemContent>
                                <MudPaper>
                                    <MudText Align="Align.Start" Style="font-size:small; color:#88949E" GutterBottom="true">
                                        @CalcuteTime(activity.ExecutionDate)
                                    </MudText>
                                    <MudText Align="Align.Start" Style="font-size:small; text-align: justify; text-justify: inter-word;">
                                        @UserActivityInfoService.GetUserLastActivityInfo(activity)
                                    </MudText>
                                </MudPaper>
                            </ItemContent>
                        </MudTimelineItem>        
                    }
                </MudTimeline>
                </Animate>
            }
        </MudElement>
    </MudItem>
</MudGrid>
@if (LastActivities != null && LastActivities.Count() > 0)
{
    <Animate Animation="Animations.FadeIn" DurationMs="500">
        <div id="footer-container">
            <Footer PaddingTop="@FooterPaddingTop" xs="8"/>
        </div>
    </Animate>
}

<style>
    .txt-size-color {
        font-size: small;
        color: #88949E;
    }
    .mud-table-row:hover{
        background-color:#13233a!important;
    }
    .mud-table-row .mud-table-cell {
        font-size:small;
        color:#88949E!important;
    }
    .mud-table-cell {
        border-bottom: 1px solid #30363d
    }
    .mud-table-pagination-toolbar {
        border-top: 1px solid #30363d
    }
    .mud-input.mud-input-underline:after {
        border-bottom: 1px solid #30363d
    }
    .mud-input.mud-input-underline:before {
        border-bottom: 1px solid #30363d
    }
    .mud-input.mud-input-underline:hover:not(.mud-disabled):before {
        border-bottom: 1px solid #30363d
    }
    .mud-timeline-item-dot.mud-timeline-dot-size-small .mud-timeline-item-dot-inner {
        height: 10px;
        width: 10px;
    }
    .mud-timeline-vertical::before {
        width: 1px;
        background: #30363d;
        padding-top: 0;
        padding-bottom: 0;
    }
    .mud-timeline-vertical .mud-timeline-item {
        padding-bottom: 15px;
    }
    .mud-timeline-vertical.mud-timeline-position-start::before {
        top: 43px;
        height: 80%;
    }
    .mud-select .mud-select-input .mud-input-slot {
        font-size: small;
        color: #88949E;
    }
    Footer {
        padding-top: 10px;
    }
</style>

@code
{
    private string ArmySearchString { get; set; } = string.Empty;
    private bool isPopoverClosed = false;

    private bool Filter(ArmyUnit armyUnit) => FilterImplementation(armyUnit, ArmySearchString);
    private bool FilterImplementation(ArmyUnit myUnit, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        else if (myUnit.Title!.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        else if (myUnit.HitPoints.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        else return false;
    }
}