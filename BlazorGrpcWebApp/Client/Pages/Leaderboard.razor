@page "/leaderboard"
@using Grpc.Core
@inject ILeaderboardService LeaderboardService
@inject IGrpcBattleService GrpcBattleService
@inject IBananaService BananaService
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudGrid>
    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h4">Leaderboard</MudText>
                <MudSpacer/>
                <MudTextField @bind-Value="LeaderboardSearchString" 
                              Placeholder="Search" 
                              Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Search" 
                              IconSize="Size.Medium" 
                              Class="mt-0"/>
            </MudCardHeader>
            <MudCardContent>
                @if (MyLeaderboard.Count() > 0)
                {
                    <MudTable Items="@MyLeaderboard"
                              Filter="new Func<GrpcUserGetLeaderboardResponse, bool>(Filter)"
                              Hover="true"
                              RowsPerPage="15" 
                              Dense="true" 
                              SortLabel="Sort By">
                        <HeaderContent>
                            <MudTh>#</MudTh>
                            <MudTh>User</MudTh>
                            <MudTh>Victories</MudTh>
                            <MudTh>Defeats</MudTh>
                            <MudTh>Battles</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Rank" Style="@GetMyUserStyle(context.UserId)">@context.Rank</MudTd>
                            <MudTd DataLabel="User" Style="@GetMyUserStyle(context.UserId)">@context.UserName</MudTd>
                            <MudTd DataLabel="Victories" Style="@GetMyUserStyle(context.UserId)">@context.Victories</MudTd>
                            <MudTd DataLabel="Defeats" Style="@GetMyUserStyle(context.UserId)">@context.Defeats</MudTd>
                            <MudTd DataLabel="Battles" Style="@GetMyUserStyle(context.UserId)">@context.Battles</MudTd>
                            <MudTd DataLabel="Fight">
                                    @if (!buttonLoading)
                                    {
                                        @if (context.UserId != myUserId)
                                        {
                                        <MudButton Color="Color.Error" 
                                                   Variant="Variant.Filled"
                                                   OnClick="async () => await FightOpponentGrpc(context.UserId)">
                                                   Fight
                                        </MudButton>
                                        }
                                    }
                                    else
                                    {
                                        <MudButton Color="Color.Error"
                                                   Disabled="true"
                                                   Variant="Variant.Filled">
                                                   <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                                        </MudButton>
                                    }
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager/>
                        </PagerContent>
                    </MudTable>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private int myUserId;
    private bool fightCompleted { get; set; }
    private bool buttonLoading { get; set; } = false;
    private string LeaderboardSearchString { get; set; } = string.Empty;
    private IList<GrpcUserGetLeaderboardResponse> MyLeaderboard = new List<GrpcUserGetLeaderboardResponse>(); 

    protected override async Task OnInitializedAsync()
    {
        var authState = await ((CustomAuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        myUserId = int.Parse(authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)!.Value);

        await LeaderboardService.DoGrpcGetLeaderboard();
        await PopulateMyLeaderBoard();
    }

    private string GetMyUserStyle(int userId)
    {
        if (userId == myUserId) 
            return "color: crimson; font-weight: 600px;";
        else 
            return string.Empty;
    }

    private Task PopulateMyLeaderBoard()
    {
        foreach (var item in LeaderboardService.GrpcLeaderboardResponses)
        {
            MyLeaderboard.Add(item); 
        }
        return Task.CompletedTask;
    }

    private async Task FightOpponentGrpc(int opponentId)
    {
        MyLeaderboard = new List<GrpcUserGetLeaderboardResponse>();
        buttonLoading = true;
        fightCompleted = false;
        try
        {
            await GrpcBattleService.DoGrpcStartBattle(opponentId);
            await LeaderboardService.DoGrpcGetLeaderboard();
            await PopulateMyLeaderBoard();
            //StateHasChanged();

            fightCompleted = true;
            await BananaService.GrpcGetBananas();
            await BananaService.BananasChanged();
            if (fightCompleted)
            {
                buttonLoading = false;
                ToastService.ShowInfo("Fight Completed", "");
            }
        }
        catch (RpcException e)
        {
            ToastService.ShowError(e.Status.ToString(), ":(");
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message, ":(");
        }
    }

    private bool Filter(GrpcUserGetLeaderboardResponse res) => FilterImplementation(res, LeaderboardSearchString);
    private bool FilterImplementation(GrpcUserGetLeaderboardResponse res, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        else if (res.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        else return false;
    }
}
