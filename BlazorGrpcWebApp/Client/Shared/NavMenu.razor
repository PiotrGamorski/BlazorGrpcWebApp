@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILogoutNavMenuService LogoutNavMenuService

<MudNavMenu>
@ChildContent
<MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
        <AuthorizeView>
            <Authorized>
                <MudNavLink Href="build" Match="NavLinkMatch.All" Icon="@Icons.Filled.GroupAdd">Build</MudNavLink>
                <MudNavLink Href="army" Match="NavLinkMatch.All" Icon="@Icons.Filled.Group">My Army</MudNavLink>
                <MudNavLink Href="leaderboard" Match="NavLinkMatch.All" Icon="@Icons.Filled.Leaderboard">Leaderboard</MudNavLink>
            </Authorized>
            <NotAuthorized>
                <MudNavLink Href="register" Match="NavLinkMatch.All" Icon="@Icons.Filled.AccessibilityNew">Register</MudNavLink>
            </NotAuthorized>
        </AuthorizeView>
        <AuthorizeView>
            <Authorized>
                @if(DisableLogout == false || LogoutNavMenuService.isAuthenticated == true)
                {
                    <MudNavLink Icon="@Icons.Material.Filled.Logout"
                                Match="NavLinkMatch.All"
                                Style="opacity: 100%; pointer-events: auto;"
                                @onclick="Logout">
                                Logout</MudNavLink>
                }
                else
                {
                    <MudNavLink Icon="@Icons.Material.Filled.Logout"
                                Match="NavLinkMatch.All"
                                Style="opacity: 50%; pointer-events: none;">Logout
                    </MudNavLink>
                }
            </Authorized>
            <NotAuthorized>
                @if(DisableLogout == false || LogoutNavMenuService.isAuthenticated == true)
                {
                        <MudNavLink Icon="@Icons.Material.Filled.Logout"
                                    Match="NavLinkMatch.All"
                                    Style="opacity: 100%; pointer-events: auto;"
                                    @onclick="Logout">
                                    Logout</MudNavLink>
                }
                else
                {
                    <MudNavLink Icon="@Icons.Material.Filled.Logout"
                                Match="NavLinkMatch.All"
                                Style="opacity: 50%; pointer-events: none;">Logout</MudNavLink>
                }
            </NotAuthorized>
        </AuthorizeView>
</MudNavMenu>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public bool DrawerOpen { get; set; }
    private bool DisableLogout { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await ((CustomAuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        DisableLogout = authenticationState.User.Identity!.AuthenticationType == "jwt" ? false : true;

        LogoutNavMenuService.OnChange += StateHasChanged;
    }

    private async Task Logout()
    {
        await ((CustomAuthStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
        DisableLogout = true;
        await LogoutNavMenuService.NotAuthenticated();
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {   
        LogoutNavMenuService.OnChange -= StateHasChanged;
    }
}
