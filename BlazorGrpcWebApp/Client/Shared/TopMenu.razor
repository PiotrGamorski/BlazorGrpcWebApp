@using BlazorGrpcWebApp.Client.Authentication
@using BlazorGrpcWebApp.Client.Interfaces
@using BlazorGrpcWebApp.Client.Interfaces.Grpc
@using BlazorGrpcWebApp.Shared.Data
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ISignOutService SignOutService
@inject IBananaService BananaService
@implements IDisposable

<AuthorizeView>
    <Authorized>
        <MudCard Style="display:flex">
            <MudImage Src = "icons/banana.png"/>
            <MudButton Variant="Variant.Filled" Color="Color.Default">
                @if (bananasHaveLoaded)
                {
                    <MudText Style="font-family:'Roboto">@BananaService.Bananas</MudText>
                }
                else
                {
                    <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true"/>
                }
            </MudButton>
            <AddBananas/>
        </MudCard>
        <MudCard Style="display: flex;">
            <MudButton Variant="Variant.Filled" @onclick="ToggleSettings">
                <MudAvatar Size="Size.Small" Color="Color.Tertiary">
                    @authUserInitials
                </MudAvatar>
                <MudIcon Icon="@Icons.Filled.ArrowDropDown"/>
            </MudButton>
            <MudPopover Open="@isExpanded"  
                        Class="px-4 pt-4"
                        AnchorOrigin="Origin.BottomCenter"
                        TransformOrigin="Origin.TopCenter"
                        Style="width:12vw">
                <MudText Style="font-size: 0.90rem">Signed in as</MudText>
                <MudText Style="margin-bottom:5px">@authUserName</MudText>
                <MudDivider Style="margin-bottom:5px"/>
                <MudText Style="margin-bottom: 5px">Your Account</MudText>
                <MudDivider Style="margin-bottom: 5px"/>
                <MudLink Style="cursor:pointer; text-decoration:none"
                         @onclick="Signout">
                    <MudText>Sign out</MudText>   
                </MudLink>    
            </MudPopover>
        </MudCard>
        <MudCard>
            <MudTooltip Text="GitHub">
                <MudNavLink Href="https://github.com/PiotrGamorski" 
                            Match="NavLinkMatch.All" 
                            Icon="@Icons.Custom.Brands.GitHub"/>
            </MudTooltip>
        </MudCard>
    </Authorized>
    <NotAuthorized>
        <MudCard>
            <NavLink href="login">Login</NavLink> |
            <NavLink href="register" style="margin-left: 0">Register</NavLink>
        </MudCard>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool bananasHaveLoaded;
    private string? authUserName;
    private string? authUserInitials;
    private bool isExpanded = false;

    protected override async Task OnInitializedAsync()
    {
        bananasHaveLoaded = false;

        var authState = await ((CustomAuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity?.IsAuthenticated;
        if (isAuthenticated ?? false)
        {
            authUserName = authState.User.FindFirst(c => c.Type == ClaimTypes.Name)!.Value;
            authUserInitials = authUserName.Substring(0,1);
            StateHasChanged();

            await BananaService.GrpcGetBananas();
        }

        bananasHaveLoaded = true;
        BananaService.OnChange += StateHasChanged;
    }

    private async Task Signout()
    {
        isExpanded = false;
        await ((CustomAuthStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
        NavigationManager.NavigateTo("/");
    }

    private void ToggleSettings()
    {
        isExpanded = !isExpanded;
    }

    public void Dispose()
    {
        BananaService.OnChange -= StateHasChanged;
    }
}
