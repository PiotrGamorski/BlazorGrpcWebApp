@using BlazorGrpcWebApp.Client.Authentication
@using BlazorGrpcWebApp.Client.Interfaces
@inject IBananaService BananaService
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
    <div class="top-menu">
        <img src = "icons/banana.png"/>
        <MudButton Variant="Variant.Filled" Color="Color.Default">
                @if (areBananasLoaded)
                {
                    <MudText Style="font-family:'Roboto">@BananaService.Bananas</MudText>
                }
                else
                {
                    <MudProgressCircular Color="Color.Secondary" Size="Size.Medium" Indeterminate="true"/>
                }
            </MudButton>
        <AddBananas/>
    </div>
    </Authorized>
    <NotAuthorized>
        <div>
            <NavLink href="login">Login</NavLink> |
            <NavLink href="register" style="margin-left: 0">Register</NavLink>
        </div>
    </NotAuthorized>

</AuthorizeView>

@code {
    private bool areBananasLoaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        areBananasLoaded = false;
        var authenticationState = await ((CustomAuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        if (authenticationState.User.Identity!.AuthenticationType == "jwt")
            await BananaService.GrpcGetBananas();
        areBananasLoaded = true;

        // subscribe to the event
        // This needs to be added, as other component executes a function effecting Bananas amount
        BananaService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        // unsubscribe to the event
        BananaService.OnChange -= StateHasChanged;
    }
}
