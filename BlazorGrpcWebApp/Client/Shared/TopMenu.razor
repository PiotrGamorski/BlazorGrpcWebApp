@using BlazorGrpcWebApp.Client.Authentication
@using BlazorGrpcWebApp.Client.Interfaces
@inject IBananaService BananaService
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
    <div class="top-menu">
        <img src = "icons/banana.png"/>
        <MudButton Variant="Variant.Filled" Color="Color.Default">
                @if (bananasLoaded)
                {
                    <MudText Style="font-family:'Roboto">@BananaService.Bananas</MudText>
                }
                else
                {
                    <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true"/>
                }
            </MudButton>
        <AddBananas/>
    </div>
    <div style="margin-left: 0; z-index: 999;">
        <MudNavMenu>
            <MudNavGroup Title="Settings" @bind-Expanded=_isExpanded Style="">
                <MudNavLink Href="#">Users</MudNavLink>
                <MudNavLink Href="#">Security</MudNavLink>
            </MudNavGroup>
        </MudNavMenu>
    </div>
    </Authorized>
    <NotAuthorized>
        <MudCard>
            <NavLink href="login">Login</NavLink> |
            <NavLink href="register" style="margin-left: 0">Register</NavLink>
        </MudCard>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool bananasLoaded;
    private bool _isExpanded;

    protected override async Task OnInitializedAsync()
    {
        bananasLoaded = false;

        var authState = await ((CustomAuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity?.IsAuthenticated;
        if (isAuthenticated ?? false)
            await BananaService.GrpcGetBananas();

        bananasLoaded = true;
        BananaService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        BananaService.OnChange -= StateHasChanged;
    }
}
